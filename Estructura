import numpy as np
import math

# Parámetros de la red
a = 3.18  # en angstroms
c = 5.18  # en angstroms

# Vectores de base para la red
a1 = np.array([a, 0, 0])
a2 = np.array([-a/2, math.sqrt(3) * a/2, 0])
a3 = np.array([0, 0, c])

# Posiciones atómicas en coordenadas fraccionales
Ga_posiciones = [
    np.array([1/3, 2/3, 0]),
    np.array([2/3, 1/3, 1/2])
]

N_posiciones = [
    np.array([1/3, 2/3, 0.3789]),
    np.array([2/3, 1/3, 0.8789])
]

def validar_entrada(mensaje):
    while True:
        try:
            valor = int(input(mensaje))
            if valor < 0:
                print("Por favor, ingresa un número entero positivo.")
                continue
            return valor
        except ValueError:
            print("Por favor, ingresa un número entero válido.")

n_max = validar_entrada("Escribe el valor de n máximo: ")
m_max = validar_entrada("Escribe el valor de m máximo: ")
p_max = validar_entrada("Escribe el valor de p máximo: ")

def guardar_xyz(nombre_archivo, atomos):
    with open(nombre_archivo, "w") as f:
        f.write(f"{len(atomos)}\n")
        f.write("Estructura GaN generada por Python\n")
        for atom, x, y, z in atomos:
            f.write(f"{atom} {x:.4f} {y:.4f} {z:.4f}\n")
    print(f"Archivo '{nombre_archivo}' generado exitosamente.")

atomos = []

for n in range(n_max + 1):
    for m in range(m_max + 1):
        for p in range(p_max + 1):
            # Posición base de la celda unitaria
            R = n * a1 + m * a2 + p * a3
            
            # Generar posiciones de Galio
            for frac in Ga_posiciones:
                # Convertir coordenadas fraccionales a cartesianas
                pos_cartesiana = frac[0] * a1 + frac[1] * a2 + frac[2] * a3
                pos_total = R + pos_cartesiana
                atomos.append(("Ga", pos_total[0], pos_total[1], pos_total[2]))
            
            # Generar posiciones de Nitrógeno
            for frac in N_posiciones:
                pos_cartesiana = frac[0] * a1 + frac[1] * a2 + frac[2] * a3
                pos_total = R + pos_cartesiana
                atomos.append(("N", pos_total[0], pos_total[1], pos_total[2]))

guardar_xyz("GaN.xyz", atomos)
